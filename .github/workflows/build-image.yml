name: Build container image

concurrency:
  group: '${{ github.workflow }}-${{ github.head_ref || github.ref }}'
  cancel-in-progress: true

on:
  push:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      REGISTRY: ghcr.io
    outputs:
      image_name: '${{ steps.set_image_name.outputs.name }}'
    steps:
      - uses: actions/checkout@v3.1.0
        with:
          persist-credentials: false
          set-safe-directory: true
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2.2.1
      
      - name: Login to GHCR
        uses: docker/login-action@v2.1.0
        with:
          registry: '${{ env.REGISTRY }}'
          username: '${{ github.repository_owner }}'
          password: '${{ github.token }}'
      
      - name: Set image name without tag
        id: set_image_name
        shell: bash
        run: |
          echo "name=${{ env.REGISTRY }}/${REPO_NAME,,}" >> "$GITHUB_OUTPUT"
        env:
          REPO_NAME: '${{ github.repository }}'

      - name: Build and push
        uses: docker/build-push-action@v3.2.0
        with:
          context: .
          platforms: linux/amd64
          push: true
          tags: |
            ${{ steps.set_image_name.outputs.name }}:latest
            ${{ steps.set_image_name.outputs.name }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  test:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:
      - name: Checkout code
        uses: actions/checkout@v3.1.0

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.10.0

      - name: Create Kubernetes ${{ matrix.k8s }} cluster
        id: kind
        uses: engineerd/setup-kind@v0.5.0
        with:
          version: v0.17.0

      - name: Testing
        run: |
          helm upgrade --install \
            --set image='${{ needs.build.outputs.image_name }}:${{ github.sha }}' \
            --wait -n hpp --create-namespace \
            -f ci/values.yaml hpp chart/
          sleep 10
          kubectl logs -n hpp -l env=testing
      - name: Testing pvc and pods
        run: |
          kubectl apply -f ci/test-pvc.yaml -f ci/test-pod.yaml
          sleep 20

          kubectl -n default get pvc
          kubectl -n default get pod
          kubectl -n default exec -i test-pod -- touch /volume/test

          kubectl delete -f ci/test-pod.yaml
          kubectl apply -f ci/test-pod.yaml
          sleep 20
          kubectl -n default exec -i test-pod -- ls -la /volume/test

          kubectl delete -f ci/test-pvc.yaml -f ci/test-pod.yaml

          kubectl -n default get pvc

  # scan:
  #   runs-on: ubuntu-latest
  #   needs:
  #     - build
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v3.1.0

  #     - name: set full image name
  #       id: set-image
  #       env:
  #         NAME: '${{ needs.build.outputs.image_name }}'
  #         TAG: '${{ github.sha }}'
  #       shell: bash
  #       run: echo "image=${NAME}:${TAG}" >> "$GITHUB_OUTPUT"

  #     - shell: sh
  #       id: test
  #       run: echo "Scanning ${{ steps.set-image.outputs.image }}"

  #     - name: Scan image with trivy
  #       id: scan
  #       uses: aquasecurity/trivy-action@0.8.0
  #       with:
  #         image-ref: ${{ steps.set-image.outputs.image }}
  #         format: 'sarif'
  #         output: trivy-results.sarif
  #         exit-code: 0
  #         vuln-type: 'os,library'
  #         severity: 'CRITICAL,HIGH,MEDIUM'

  #     - name: Output Sarif File
  #       shell: bash
  #       run: cat ${{ github.workspace }}/trivy-results.sarif

  #     # This step checks out a copy of your repository.
  #     - name: Upload SARIF file
  #       uses: github/codeql-action/upload-sarif@v2
  #       with:
  #         token: ${{ github.token }}
  #         # Path to SARIF file relative to the root of the repository
  #         sarif_file: ${{ github.workspace }}/trivy-results.sarif

  #     - name: Vulz Count
  #       shell: bash
  #       run: |
  #         TRIVY_COUNT=$(cat ${{ github.workspace }}/trivy-results.sarif | jq '.runs[0].results | length')
  #         echo "TRIVY_COUNT: $TRIVY_COUNT"
  #         echo "Image Vulnerability scan output" >> $GITHUB_STEP_SUMMARY
  #         echo "Image ID: ${{ steps.set-image.outputs.image }}" >> $GITHUB_STEP_SUMMARY
  #         echo "" >> $GITHUB_STEP_SUMMARY
  #         echo "Trivy Count: $TRIVY_COUNT" >> $GITHUB_STEP_SUMMARY
